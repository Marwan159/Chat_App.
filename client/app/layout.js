"use client";
import { cn } from "@/lib/utils";
import { Inter as FontSans } from "next/font/google";
// import { Inter } from "next/font/google";
// import "./globals.css";

// const inter = Inter({ subsets: ["latin"] });

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({ children }) {
//   return (
//     <html lang="en">
//       <body>{children}</body>
//     </html>
//   );
// }
import "./globals.css";
import { Toaster } from "sonner";
import { useAppStore } from "@/store";
import Auth from "@/components/ui/auth";
import { apiClient } from "@/lib/api-client";
import { GET_USERDATA_ROUTE } from "@/utils/constenst";
import { useEffect, useState } from "react";
import { SocketProvider } from "@/src/context/socketContext";
const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

export default function RootLayout({ children }) {
  const { userInfo, setUserInfo } = useAppStore();
  const [loading, setLoading] = useState(true);
  const auth = !!userInfo;
  useEffect(() => {
    const getUserData = async () => {
      try {
        const data = await apiClient.get(GET_USERDATA_ROUTE, {
          withCredentials: true,
        });
        if (data.data.id) {
          setUserInfo(data.data);
        } else {
          setUserInfo(undefined);
        }
        console.log(data);
      } catch (error) {
        setUserInfo(undefined);
        console.log(error.message);
      } finally {
        setLoading(false);
      }
    };
    if (!userInfo) {
      getUserData();
    } else {
      setLoading(false);
    }
  }, [userInfo, setUserInfo]);
  if (loading) {
    return (
      <html>
        <body>
          <h1>loading....</h1>
        </body>
      </html>
    );
  }
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable
        )}
      >
        <SocketProvider>
          <main>{auth ? children : <Auth />}</main>
          <Toaster />
        </SocketProvider>
      </body>
    </html>
  );
}
